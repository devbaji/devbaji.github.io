import{_ as n,c as a}from"./app.51b611bb.js";var s="/vue3-google-login/images/google-rendered-button.png",t="/vue3-google-login/images/one-tap-prompt.gif",e="/vue3-google-login/images/auto-login.gif",p="/vue3-google-login/images/custom-login-button.gif";const o={},l=a(`<h1 id="vue-3-google-login-docs" tabindex="-1"><a class="header-anchor" href="#vue-3-google-login-docs" aria-hidden="true">#</a> Vue 3 Google Login Docs</h1><p>This plugin helps you to add Login With Google feature to your Vue 3 application</p><p><a href="https://npm-stat.com/charts.html?package=vue3-google-login" target="_blank"><img src="https://img.shields.io/npm/dm/vue3-google-login.svg" alt="npm"></a>\xA0 <a href="https://www.npmjs.com/package/vue3-google-login" target="_blank"><img src="https://img.shields.io/npm/v/vue3-google-login.svg" alt="npm"></a>\xA0 <a href="https://bundlephobia.com/package/vue3-google-login" target="_blank"><img src="https://img.shields.io/bundlephobia/minzip/vue3-google-login.svg" alt="npm"></a>\xA0 </p><h2 id="overview" tabindex="-1"><a class="header-anchor" href="#overview" aria-hidden="true">#</a> Overview</h2><p>This is a lightweigh plugin for implementing log-in and sign-up flows using <a href="https://developers.google.com/identity/oauth2/web" target="_blank"> Google Identity Services</a> with the help of <a href="https://developers.google.com/identity/oauth2/web/guides/load-3p-authorization-library" target="_blank">Google 3P Authorization JavaScript Library</a></p><p>This allows you to implement the following features</p><ul><li>Login with Google button</li><li>Login using One Tap prompt</li><li>Automatic Login without any user interaction</li><li>Login with Google using a custom button</li></ul><h2 id="prerequisites" tabindex="-1"><a class="header-anchor" href="#prerequisites" aria-hidden="true">#</a> Prerequisites</h2><ul><li>This plugin needs vue version 3.0.3 or above to work properly</li><li>To enable Login With Google on your website, you first need to set up your Google API client ID. To do so, <a href="https://developers.google.com/identity/gsi/web/guides/get-google-api-clientid" target="_blank">follow these steps</a></li></ul><h2 id="basic-setup" tabindex="-1"><a class="header-anchor" href="#basic-setup" aria-hidden="true">#</a> Basic Setup</h2><h3 id="installation" tabindex="-1"><a class="header-anchor" href="#installation" aria-hidden="true">#</a> Installation</h3><p>First step is to install it using <code>npm</code></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> vue3-google-login
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="initialize-the-plugin" tabindex="-1"><a class="header-anchor" href="#initialize-the-plugin" aria-hidden="true">#</a> Initialize the plugin</h3><p>Initialize the vue3-google-login plugin in main.js</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;./App.vue&#39;</span>
<span class="token keyword">import</span> vue3GoogleLogin <span class="token keyword">from</span> <span class="token string">&#39;vue3-google-login&#39;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>vue3GoogleLogin<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">clientId</span><span class="token operator">:</span> <span class="token string">&#39;YOUR_GOOGLE_CLIENT_ID&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="googlelogin-component" tabindex="-1"><a class="header-anchor" href="#googlelogin-component" aria-hidden="true">#</a> GoogleLogin component</h3><p>Once the plugin is installed you can use the component <code>GoogleLogin</code> anywhere in your project, this will render a log in button which opens a popup for google login</p><div class="language-vue ext-vue line-numbers-mode"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">const</span> <span class="token function-variable function">callback</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">/* This callback will be triggered when user selects or login to
     his google account from the popup */</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Handle the response&quot;</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>GoogleLogin</span> <span class="token attr-name">client-id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>YOUR_GOOGLE_CLIENT_ID<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:callback</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>callback<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><blockquote><p>\u2139\uFE0F You can omit <code>client-id</code> prop if it is <a href="#initialize-the-plugin">initialized in main.js</a></p></blockquote><p>Here is an image showing log in button rendered by google</p><p align="center"><img src="`+s+`"></p><h3 id="one-tap-prompt" tabindex="-1"><a class="header-anchor" href="#one-tap-prompt" aria-hidden="true">#</a> One Tap prompt</h3><p>For this feature set the prop <code>prompt</code> to true, this will open a prompt with the list of logged in google accounts of the user, now user can just tap on his prefered account to easily login to our application</p><div class="language-vue ext-vue line-numbers-mode"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">const</span> <span class="token function-variable function">callback</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// This callback will be triggered when user click on the One Tap prompt</span>
  <span class="token comment">/* This callback will be also triggered when user click on login button and selects or login to
     his google account from the popup */</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Handle the response&quot;</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>GoogleLogin</span> <span class="token attr-name">:callback</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>callback<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:prompt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><blockquote><p>\u2139\uFE0F If the user closes the One Tap prompt manually, the One Tap prompt is suppressed, see <a href="https://developers.google.com/identity/gsi/web/guides/features#exponential_cooldown" target="_blank">here</a> for more info</p></blockquote><p>Here is an image showing One Tap prompt</p><p align="center"><img src="`+t+`"></p><h3 id="automatic-login" tabindex="-1"><a class="header-anchor" href="#automatic-login" aria-hidden="true">#</a> Automatic Login</h3><p>For this feature set the prop <code>autoLogin</code> to true, this will automatically detects whether only one google account is logged in, if yes then prompt will automatically log in and will trigger the callback without any user interactions, to make this work <code>prompt</code> must be set to true</p><div class="language-vue ext-vue line-numbers-mode"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">const</span> <span class="token function-variable function">callback</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// This callback will be triggered automatically if only one google account is logged in</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Handle the response&quot;</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>GoogleLogin</span> <span class="token attr-name">:callback</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>callback<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:prompt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:autoLogin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>Here is an image showing the prompt automatically detects the logged in Google account and logs in automatically</p><p align="center"><img src="`+e+'"></p><h3 id="options" tabindex="-1"><a class="header-anchor" href="#options" aria-hidden="true">#</a> Options</h3><p>These options can be either used at <a href="#initialize-the-plugin">initializing in main.js</a> or as prop values in <a href="#googlelogin-component">GoogleLogin component</a></p><table><thead><tr><th>Prop</th><th style="text-align:center;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td>clientId</td><td style="text-align:center;">String</td><td style="text-align:left;">Google API client ID</td></tr><tr><td>prompt</td><td style="text-align:center;">Boolean</td><td style="text-align:left;">Set this to true to display the One Tap prompt<br><br>Setting this value as a prop of <a href="#googlelogin-component">GoogleLogin component</a> will be ignored if this is set as option on <a href="#initialize-the-plugin">initializing the plugin</a></td></tr><tr><td>autoLogin</td><td style="text-align:center;">Boolean</td><td style="text-align:left;">Setting this value to true will make the prompt to automatically log in without any user interactions<br><br>For this to work <code>prompt</code> must be set to true<br><br>Setting this value as a prop of <a href="#googlelogin-component">GoogleLogin component</a> will be ignored if this is set as option on <a href="#initialize-the-plugin">initializing the plugin</a></td></tr><tr><td>callback</td><td style="text-align:center;">Function</td><td style="text-align:left;">The callback function which will be trigger with a response object once the login is completed</td></tr><tr><td>idConfiguration</td><td style="text-align:center;">Object</td><td style="text-align:left;">IdConfiguration object for initializing, <a href="https://developers.google.com/identity/gsi/web/reference/js-reference#IdConfiguration" target="_blank"> see list of fields and descriptions of the IdConfiguration here</a></td></tr><tr><td>buttonConfig</td><td style="text-align:center;">Object</td><td style="text-align:left;">Configuration of the login button rendered by Google, <a href="https://developers.google.com/identity/gsi/web/reference/js-reference#GsiButtonConfiguration" target="_blank">see list of fields and descriptions of these configurations here</a></td></tr></tbody></table><h2 id="custom-login-button" tabindex="-1"><a class="header-anchor" href="#custom-login-button" aria-hidden="true">#</a> Custom Login Button</h2><p>Some times you may not need the default button rendered by Google, you can create your own button and can make it behave like a login with Google button</p><p>Here is an image showing how a custom button opens the Google login popup</p><p align="center"><img width="300" src="'+p+`"></p> This can be done in two ways <blockquote><p>\u26A0\uFE0F For custom buttons this plugin use <code>google.accounts.oauth2.initTokenClient</code> under the hoods which gives an <a href="https://developers.google.com/identity/oauth2/web/guides/use-code-model#auth_code_handling" target="_blank">OAuth2 authorization code</a> in the callback response, but Google rendered login button and One Tap prompt gives a <a href="https://developers.google.com/identity/gsi/web/reference/js-reference#CredentialResponse" target="_blank">CredentialResponse</a> with a JWT credential field, so if you are using a combination of these, validating your callback response on server-side can be a little tricky, this is more explained <a href="#server-side-validation">here</a></p></blockquote><h3 id="wrap-around-googlelogin" tabindex="-1"><a class="header-anchor" href="#wrap-around-googlelogin" aria-hidden="true">#</a> Wrap around GoogleLogin</h3><p>Create your own button component and wrap it around <a href="#googlelogin-component">GoogleLogin component</a>, default slot content of this component is considered as a custom login button and it will act as a login with Google button</p><div class="language-vue ext-vue line-numbers-mode"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">const</span> <span class="token function-variable function">callback</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Handle the response&quot;</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>GoogleLogin</span> <span class="token attr-name">:callback</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>callback<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>Login Using Google<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>GoogleLogin</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="gloginpopup-function" tabindex="-1"><a class="header-anchor" href="#gloginpopup-function" aria-hidden="true">#</a> gLoginPopup function</h3><p>You can use <code>gLoginPopup</code> function to dynamically trigger the opening of login popup, also you can use <code>useLibraryLoaded</code> composable function get a boolean state showing whether the <a href="https://developers.google.com/identity/oauth2/web/guides/load-3p-authorization-library" target="_blank">Google 3P Authorization JavaScript Library</a> is loaded or not</p><div class="language-vue ext-vue line-numbers-mode"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> useLibraryLoaded<span class="token punctuation">,</span> gLoginPopup <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue3-google-login&#39;</span>

<span class="token keyword">const</span> gLibraryLoaded <span class="token operator">=</span> <span class="token function">useLibraryLoaded</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token function-variable function">callback</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Handle the response&quot;</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">onButtonClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">gLoginPopup</span><span class="token punctuation">(</span><span class="token punctuation">{</span> callback <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onButtonClick<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:disabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>!gLibraryLoaded<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Login Using Google<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="sign-in-javascript-api" tabindex="-1"><a class="header-anchor" href="#sign-in-javascript-api" aria-hidden="true">#</a> Sign-In JavaScript API</h3><p>Once the <a href="https://developers.google.com/identity/oauth2/web/guides/load-3p-authorization-library" target="_blank">Google 3P Authorization JavaScript Library</a> is loaded, Sign-In JavaScript API will be available in window scope and it can be accessed using <code>window.google</code>, see <a href="https://developers.google.com/identity/gsi/web/reference/js-reference" target="_blank">Sign-In JavaScript API</a> and <a href="https://developers.google.com/identity/oauth2/web/guides/use-token-model" target="_blank">Token model</a> for more info on Sign-In JavaScript API</p><p>Here is how we can use this Sign-In JavaScript API to create a custom login button</p><div class="language-vue ext-vue line-numbers-mode"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> useLibraryLoaded <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue3-google-login&#39;</span>

<span class="token keyword">const</span> gLibraryLoaded <span class="token operator">=</span> <span class="token function">useLibraryLoaded</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token function-variable function">callback</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Handle the response&quot;</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">onButtonClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>gLibraryLoaded<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    window<span class="token punctuation">.</span>google<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>oauth2<span class="token punctuation">.</span><span class="token function">initTokenClient</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">client_id</span><span class="token operator">:</span> <span class="token string">&#39;YOUR_GOOGLE_CLIENT_ID&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">scope</span><span class="token operator">:</span> <span class="token string">&#39;email profile&#39;</span><span class="token punctuation">,</span>
      callback
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">requestAccessToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onButtonClick<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:disabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>!gLibraryLoaded<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Login Using Google<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h2 id="server-side-validation" tabindex="-1"><a class="header-anchor" href="#server-side-validation" aria-hidden="true">#</a> Server-side Validation</h2><p>Once the callback is triggered you need to validate the callback response using your Server-side endpoints, but this is done differently for the callback triggered by Google rendered login button/One Tap prompts and callback triggered by Custom Login Button</p><h3 id="google-rendered-login-button-one-tap-prompts" tabindex="-1"><a class="header-anchor" href="#google-rendered-login-button-one-tap-prompts" aria-hidden="true">#</a> Google rendered login button/One Tap prompts</h3><p>Callback will be triggered with a <a href="https://developers.google.com/identity/gsi/web/reference/js-reference#CredentialResponse" target="_blank">CredentialResponse</a> with a JWT credential string</p><p>Here is a sample Node.js code snippet for validating the JWT credential string</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> OAuth2Client <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;google-auth-library&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OAuth2Client</span><span class="token punctuation">(</span><span class="token string">&quot;YOUR_GOOGLE_CLIENT_ID&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Call this function to validate the JWT credential sent from client-side</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">verifyCredentials</span><span class="token punctuation">(</span><span class="token parameter">credential</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> ticket <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">verifyIdToken</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">idToken</span><span class="token operator">:</span> credential<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> payload <span class="token operator">=</span> ticket<span class="token punctuation">.</span><span class="token function">getPayload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> payload
<span class="token punctuation">}</span>

<span class="token function">verifyCredentials</span><span class="token punctuation">(</span><span class="token string">&#39;JWT_CREDENTIAL_STRING_FROM_CLIENT_SIDE&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">userInfo</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// use userInfo and do your server-side logics here</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// validation failed and userinfo was not obtained</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="custom-login-button-1" tabindex="-1"><a class="header-anchor" href="#custom-login-button-1" aria-hidden="true">#</a> Custom Login Button</h3><p>Callback will be triggered with a response containing an <a href="https://developers.google.com/identity/oauth2/web/guides/use-code-model#auth_code_handling" target="_blank">OAuth2 authorization code</a></p><p>Here is a sample Node.js code snippet for validating the OAuth2 authorization code</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> OAuth2Client <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;google-auth-library&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OAuth2Client</span><span class="token punctuation">(</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">clientId</span><span class="token operator">:</span> <span class="token string">&#39;YOUR_GOOGLE_CLIENT_ID&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">clientSecret</span><span class="token operator">:</span> <span class="token string">&#39;YOUR_GOOGLE_CLIENT_SECRET&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">redirectUri</span><span class="token operator">:</span> <span class="token string">&#39;YOUR_GOOGLE_REDIRECT_URI&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Call this function to validate OAuth2 authorization code sent from client-side</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">verifyCode</span><span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> <span class="token punctuation">{</span> tokens <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">getToken</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span>
  client<span class="token punctuation">.</span><span class="token function">setCredentials</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">access_token</span><span class="token operator">:</span> tokens<span class="token punctuation">.</span>access_token <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> userinfo <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;https://www.googleapis.com/oauth2/v3/userinfo&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> userinfo<span class="token punctuation">.</span>data
<span class="token punctuation">}</span>

<span class="token function">verifyCode</span><span class="token punctuation">(</span><span class="token string">&#39;AUTHORIZATION_CODE_FROM_CLIENT_SIDE&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">userInfo</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// use userInfo and do your server-side logics here</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// validation failed and userinfo was not obtained</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h3 id="combination-of-one-tap-prompt-and-custom-button" tabindex="-1"><a class="header-anchor" href="#combination-of-one-tap-prompt-and-custom-button" aria-hidden="true">#</a> Combination of One Tap Prompt and Custom Button</h3><p>If you are using the combination of these like below, then the response caught in callback function can be different based on the user action, you can handle this by making serverside endpoints which accepts both type of responses and in callback function conditionally call these endpoints</p><div class="language-vue ext-vue line-numbers-mode"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">const</span> <span class="token function-variable function">callback</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>credential<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Call the endpoint which validates JWT credential string&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Call the endpoint which validates authorization code&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>GoogleLogin</span> <span class="token attr-name">:callback</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>callback<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:prompt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:autoLogin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>Add<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>GoogleLogin</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div>`,65);function c(i,u){return l}var k=n(o,[["render",c],["__file","index.html.vue"]]);export{k as default};
